<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.easyway.mapper.ScheduleMapper">
	<cache />
	<!--스케쥴테이블 전체 불러오기<![CDATA[ ]]>는 추후 부등호(<,>)를 사용하기 위해서-->
	<select id="getList" resultType = "org.easyway.domain.schedule.ScheduleVO">
			SELECT
			schedule_id AS scheduleId , employee_id AS employeeId, schedule_title AS scheduleTitle,
			schedule_start AS scheduleStart, schedule_end AS scheduleEnd,
			schedule_content AS scheduleContent, schedule_importance AS scheduleImportance, schedule_private AS schedulePrivate
			FROM schedule ORDER BY schedule_id
	</select>
<!-- 	WHERE employee_id =#{employeeId} ORDER by schedule_id -->
	<!--일정등록 schedule_seq.nextval 자동으로 1씩증가-->
	<insert id="insert">
		INSERT INTO schedule(
			schedule_id, employee_id, schedule_title , schedule_start, schedule_end,
			schedule_content, schedule_importance , schedule_private
		)
		VALUES(
			schedule_seq.nextval, #{employeeId}, #{scheduleTitle}, #{scheduleStart},#{scheduleEnd},
			#{scheduleContent}, #{scheduleImportance}, #{schedulePrivate}
		)
	</insert>
	<!--date타입으로 기간변경시 아래 sql문활용하기 -->
	<!-- VALUES(
			schedule_seq.nextval, '1', #{schedule_title}, TO_DATE(TO_CHAR(#{schedule_start},'yyyy/mm/dd'),'yyyy/mm/dd'),
			TO_DATE(TO_CHAR(#{schedule_end},'yyyy/mm/dd'),'yyyy/mm/dd'),
			#{schedule_content}, #{schedule_importance}, #{schedule_private}
		) #{scheduleStart},#{scheduleEnd},-->
	<!-- scheduleId 사용시 pk번호 반환하는 sql문
	dual:함수에 대한 쓰임을 알고 싶을때 특정 테이블을 생성할 필요없이 dual 테이블을 이용하여 함수의 값을 리턴(return)받을 수 있다. -->
	<insert id="insertSelectKey" >
		<selectKey keyProperty="scheduleId" order ="BEFORE"
		resultType = "long">
		select schedule_seq.nextval from dual
		</selectKey>
	
		INSERT INTO schedule (schedule_id , employee_id, schedule_title , schedule_start, schedule_end,
			schedule_content , schedule_importance , schedule_private )
		VALUES
		(#{scheduleId}, #{employeeId}, #{scheduleTitle},#{scheduleStart},#{scheduleEnd},
			#{scheduleContent}, #{scheduleImportance}, #{schedulePrivate}
	</insert>
	
	 
	<select id="read" resultType = "org.easyway.domain.schedule.ScheduleVO">
		SELECT 
			schedule_id AS scheduleId , employee_id AS employeeId, schedule_title AS scheduleTitle,
			schedule_start AS scheduleStart, schedule_end AS scheduleEnd,
			schedule_content AS scheduleContent, schedule_importance AS scheduleImportance, schedule_private AS schedulePrivate
		FROM schedule WHERE schedule_id = #{scheduleId}
	</select>
<!-- 	WHERE schedule_id = #{scheduleId} -->

	<delete id="remove">
		delete from schedule where schedule_id = #{scheduleId}
	</delete>
	
	<update id="modify">	
		update schedule set schedule_title = #{scheduleTitle}, schedule_start = #{scheduleStart},
		schedule_end =#{scheduleEnd},schedule_content = #{scheduleContent},
		schedule_importance = #{scheduleImportance}, schedule_private = #{schedulePrivate}
		where schedule_id= #{scheduleId}
	</update>
	<!--modify오류시 아래쿼리문참고 -->
<!-- 	update schedule set schedule_title = '수정제목', schedule_start = '2021/06/09', -->
<!-- 		schedule_end ='2021/09/06',schedule_content ='수정내용', -->
<!-- 		schedule_importance = '하', schedule_private = 'Y' -->
<!-- 		where schedule_id= 106; -->
	
<!-- 	<select id="countBoard" parameterType="Search" resultType = "int"> -->
<!-- 		select count(*) from board -->
<!-- 		<if test="area !=null"> -->
<!-- 			<where> -->
<!-- 				where (title LIKE %?띻만?? OR writer LIKE %?띻만??) -->
<!-- 				<foreach collection="area" item="item" separator="OR" -->
<!-- 					open="(" close=")"> -->
<!-- 					${item} LIKE #{searchKey} -->
<!-- 				</foreach> -->
<!-- 			</where> -->
<!-- 		</if> -->
<!-- 	</select> -->
	
<!-- 	<insert id="insertReply" parameterType="Reply"> -->
<!-- 		insert into reply -->
<!-- 		values(reply_seq.nextval, #{r_title},#{r_writer},#{r_contents},sysdate, #{seq}) -->
		
<!-- 	</insert> -->
	
<!-- 	<select id="listReply" parameterType="int" resultType="Reply"> -->
<!-- 		select* from reply where seq = #{seq} -->
<!-- 	</select> -->
	
</mapper>
